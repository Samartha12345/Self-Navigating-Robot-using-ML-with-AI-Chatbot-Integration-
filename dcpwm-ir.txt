import RPi.GPIO as GPIO
import time

# Motor control pins
MOTOR_A_EN = 12  # Enable pin for Motor A
MOTOR_A_IN1 = 6  # Input 1 pin for Motor A
MOTOR_A_IN2 = 19  # Input 2 pin for Motor A

MOTOR_B_EN = 13  # Enable pin for Motor B
MOTOR_B_IN1 = 16  # Input 1 pin for Motor B
MOTOR_B_IN2 = 26  # Input 2 pin for Motor B

# Ultrasonic sensor pins
TRIG = 20
ECHO = 21

# Set up GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup([MOTOR_A_EN, MOTOR_A_IN1, MOTOR_A_IN2,
            MOTOR_B_EN, MOTOR_B_IN1, MOTOR_B_IN2], GPIO.OUT)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

# Create PWM instances for motors
motor_a_pwm = GPIO.PWM(MOTOR_A_EN, 100)  # Frequency = 100 Hz
motor_b_pwm = GPIO.PWM(MOTOR_B_EN, 100)  # Frequency = 100 Hz

# Start PWM
motor_a_pwm.start(0)  # Initialize with 0% duty cycle
motor_b_pwm.start(0)  # Initialize with 0% duty cycle

# Function to get distance from ultrasonic sensor
def get_distance():
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)
    pulse_start = time.time()
    pulse_end = time.time()
    while GPIO.input(ECHO) == 0:
        pulse_start = time.time()
    while GPIO.input(ECHO) == 1:
        pulse_end = time.time()
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150
    distance = round(distance, 2)
    return distance

# Motor control functions
def motor_a_backward(speed):
    GPIO.output(MOTOR_A_IN1, GPIO.HIGH)
    GPIO.output(MOTOR_A_IN2, GPIO.LOW)
    motor_a_pwm.ChangeDutyCycle(speed)

def motor_a_forward(speed):
    GPIO.output(MOTOR_A_IN1, GPIO.LOW)
    GPIO.output(MOTOR_A_IN2, GPIO.HIGH)
    motor_a_pwm.ChangeDutyCycle(speed)

def motor_b_backward(speed):
    GPIO.output(MOTOR_B_IN1, GPIO.HIGH)
    GPIO.output(MOTOR_B_IN2, GPIO.LOW)
    motor_b_pwm.ChangeDutyCycle(speed)

def motor_b_forward(speed):
    GPIO.output(MOTOR_B_IN1, GPIO.LOW)
    GPIO.output(MOTOR_B_IN2, GPIO.HIGH)
    motor_b_pwm.ChangeDutyCycle(speed)

def stop_motors():
    GPIO.output(MOTOR_A_IN1, GPIO.LOW)
    GPIO.output(MOTOR_A_IN2, GPIO.LOW)
    motor_a_pwm.ChangeDutyCycle(0)

    GPIO.output(MOTOR_B_IN1, GPIO.LOW)
    GPIO.output(MOTOR_B_IN2, GPIO.LOW)
    motor_b_pwm.ChangeDutyCycle(0)

# Main loop
try:
    while True:
        motor_a_forward(20)  # Run Motor A forward at 50% speed
        motor_b_forward(20)  # Run Motor B forward at 50% speed

        distance = get_distance()
        print("Distance:", distance, "cm")

        if distance <= 10:  # If obstacle detected within 10cm
            print("Obstacle detected!")
            stop_motors()   # Stop motors
            time.sleep(2)
            motor_a_backward(20)  # Move backward at 50% speed
            motor_b_backward(20)
            time.sleep(2)
            stop_motors()
            time.sleep(2)
            motor_a_forward(20)   # Turn right
            time.sleep(2)
            stop_motors()
            time.sleep(2)
            # Continue forward motion

except KeyboardInterrupt:
    pass

# Clean up
motor_a_pwm.stop()
motor_b_pwm.stop()
GPIO.cleanup()


